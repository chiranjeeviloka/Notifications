// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/chiranjeevi.loka/golang/notifications/internal/store/mysqlstore.go

// Package mock_store is a generated GoMock package.
package store

import (
	context "context"
	model "notification-service/internal/model"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetNotification mocks base method.
func (m *MockStore) GetNotification(ctx context.Context, notifications *[]model.Notification, UserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotification", ctx, notifications, UserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetNotification indicates an expected call of GetNotification.
func (mr *MockStoreMockRecorder) GetNotification(ctx, notifications, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotification", reflect.TypeOf((*MockStore)(nil).GetNotification), ctx, notifications, UserID)
}

// UpdateLastLogin mocks base method.
func (m *MockStore) UpdateLastLogin(ctx context.Context, docID string, lastLoginTimestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastLogin", ctx, docID, lastLoginTimestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastLogin indicates an expected call of UpdateLastLogin.
func (mr *MockStoreMockRecorder) UpdateLastLogin(ctx, docID, lastLoginTimestamp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastLogin", reflect.TypeOf((*MockStore)(nil).UpdateLastLogin), ctx, docID, lastLoginTimestamp)
}
